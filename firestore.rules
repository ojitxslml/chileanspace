/**
 * @file Firestore Security Rules
 * @description This ruleset defines access control for the Habitat app's Firestore database.
 *
 * Core Philosophy:
 * The security model prioritizes user-specific data ownership for user profiles,
 * while other data collections (crew, sectors, oshi, provisions, materials)
 * are globally readable but not writable without authentication. User listing is disabled.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the owning user.
 * - /crew/{crewId}: Stores crew member data.
 * - /sectors/{sectorId}: Stores habitat sector data.
 * - /oshi/{oshiId}: Stores OSHI (Occupational Safety, Health, and Inclusion) data for crew members.
 * - /provisions/{provisionId}: Stores inventory provision data.
 * - /materials/{materialId}: Stores construction material data.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and owned by the authenticated user.
 * - Data concerning crew members, habitat sectors, OSHI, provisions and materials is publicly readable.
 * - No write access to crew, sectors, oshi, provisions, and materials is given.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User 'testuser' with UID 'testuser' can create their profile.
     * @deny (create) - User 'otheruser' with UID 'testuser' cannot create a profile.
     * @allow (get, list) - User 'testuser' with UID 'testuser' can read their profile.
     * @deny (get, list) - User 'otheruser' with UID 'testuser' cannot read the profile.
     * @allow (update, delete) - User 'testuser' with UID 'testuser' can update their profile.
     * @deny (update, delete) - User 'otheruser' with UID 'testuser' cannot update the profile.
     * @principle Enforces document ownership for writes; restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of the document, and that the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to crew member documents.
     * @path /crew/{crewId}
     * @allow (get, list) - Any user can read crew member data.
     * @deny (create, update, delete) - No one can create, update, or delete crew member data.
     * @principle Allows public read access but restricts write access.
     */
    match /crew/{crewId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to sector documents.
     * @path /sectors/{sectorId}
     * @allow (get, list) - Any user can read sector data.
     * @deny (create, update, delete) - No one can create, update, or delete sector data.
     * @principle Allows public read access but restricts write access.
     */
    match /sectors/{sectorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to OSHI data documents.
     * @path /oshi/{oshiId}
     * @allow (get, list) - Any user can read OSHI data.
     * @deny (create, update, delete) - No one can create, update, or delete OSHI data.
     * @principle Allows public read access but restricts write access.
     */
    match /oshi/{oshiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to provision documents.
     * @path /provisions/{provisionId}
     * @allow (get, list) - Any user can read provision data.
     * @deny (create, update, delete) - No one can create, update, or delete provision data.
     * @principle Allows public read access but restricts write access.
     */
    match /provisions/{provisionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to material documents.
     * @path /materials/{materialId}
     * @allow (get, list) - Any user can read material data.
     * @deny (create, update, delete) - No one can create, update, or delete material data.
     * @principle Allows public read access but restricts write access.
     */
    match /materials/{materialId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}