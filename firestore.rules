/**
 * @fileoverview Firestore Security Rules for CHILEANSPACE Habitat Application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a user-ownership model for habitat designs,
 * ensuring that only the owning user can create, modify, or delete their designs.
 * Public read access is granted to material and storm simulation data.
 *
 * Data Structure:
 * - /users/{userId}/habitatDesigns/{habitatDesignId}: Stores habitat designs owned by a specific user.
 * - /materials/{materialId}: Stores construction material data accessible to all authenticated users.
 * - /stormSimulations/{stormSimulationId}: Stores dust storm simulation data accessible to all authenticated users.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed by not providing a rule for it.
 * - Public read access is granted for materials and storm simulations.
 *
 * Denormalization for Authorization:
 *  - The 'id' field in the `HabitatDesign` entity is used to enforce path consistency.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces ownership for habitat designs, allowing only the owner to read, create, update, or delete their own designs.
     * @path /users/{userId}/habitatDesigns/{habitatDesignId}
     * @allow (create) - User 'user123' creates a new habitat design with design.id == 'user123'.
     * @allow (get, list, update, delete) - User 'user123' reads/modifies/deletes habitat design 'design456' under /users/user123/.
     * @deny (create) - User 'user456' attempts to create a habitat design under /users/user123/.
     * @deny (get, list, update, delete) - User 'user456' attempts to read/modify/delete habitat design 'design456' under /users/user123/.
     * @principle Enforces document ownership for writes. Validates relational integrity between user ID in the path and data.
     */
    match /users/{userId}/habitatDesigns/{habitatDesignId} {
      // Helper function to check if the user is signed in and owns the document
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user is signed in and owns the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the owner to read their habitat designs
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Allow the owner to create a new habitat design if the userId in the path matches the request auth UID
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow the owner to update an existing habitat design if they own it and the userId hasn't changed
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow the owner to delete their habitat design if they own it
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows any authenticated user to read material data, but restricts creation, updates, and deletion.
     * @path /materials/{materialId}
     * @allow (get, list) - Any signed-in user can read a material.
     * @deny (create, update, delete) - No one can create, update, or delete materials.
     * @principle Grants public read access to materials.
     */
    match /materials/{materialId} {
      // Allow any authenticated user to read material data
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      // Do not allow anyone to create, update, or delete material data
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows any authenticated user to read storm simulation data, but restricts creation, updates, and deletion.
     * @path /stormSimulations/{stormSimulationId}
     * @allow (get, list) - Any signed-in user can read a storm simulation.
     * @deny (create, update, delete) - No one can create, update, or delete storm simulations.
     * @principle Grants public read access to storm simulations.
     */
    match /stormSimulations/{stormSimulationId} {
      // Allow any authenticated user to read storm simulation data
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      // Do not allow anyone to create, update, or delete storm simulation data
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper function to check if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }
}