/**
 * @fileoverview Firestore Security Rules for the Habitat application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on clearly defined roles and ownership.
 * It aims to strike a balance between security and rapid prototyping by focusing on authorization
 * while relaxing data validation constraints.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the owning user.
 * - /crew/{crewId}: Stores crew member data. Currently, read access is public, but write access is restricted.
 * - /sectors/{sectorId}: Stores habitat sector data. Currently, read access is public, but write access is restricted.
 * - /oshi/{oshiId}: Stores OSHI data for crew members. Currently, read access is public, but write access is restricted.
 * - /provisions/{provisionId}: Stores inventory data. Currently, read access is public, but write access is restricted.
 * - /materials/{materialId}: Stores construction material data. Currently, read access is public, but write access is restricted.
 *
 * Key Security Decisions:
 * - User listing is explicitly disallowed.
 * - Public read access is granted to the crew, sector, oshi, provisions, and materials collections to allow for the reported issue to be fixed.
 * - Data validation is minimized to accelerate prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (read, write) if the user is signed in and the requested userId matches their own ID. (e.g., request.auth.uid == 'user123')
     * @deny (read, write) if the user is not signed in or the userId does not match their own ID. (e.g., request.auth.uid == 'otherUser')
     * @principle Enforces strict user ownership for profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read crew member data, but restricts writes.
     * @path /crew/{crewId}
     * @allow (read) any signed in user can read crew data.
     * @deny (write) any writes are forbidden until proper authorization is set up.
     * @principle Permits public read access while restricting write operations to authorized users.
     */
    match /crew/{crewId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add authorization for crew creation.
      allow update: if false; // TODO: Add authorization for crew updates.
      allow delete: if false; // TODO: Add authorization for crew deletion.
    }

    /**
     * @description Allows anyone to read sector data, but restricts writes.
     * @path /sectors/{sectorId}
     * @allow (read) any signed in user can read sector data.
     * @deny (write) any writes are forbidden until proper authorization is set up.
     * @principle Permits public read access while restricting write operations to authorized users.
     */
    match /sectors/{sectorId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add authorization for sector creation.
      allow update: if false; // TODO: Add authorization for sector updates.
      allow delete: if false; // TODO: Add authorization for sector deletion.
    }

    /**
     * @description Allows anyone to read OSHI data, but restricts writes.
     * @path /oshi/{oshiId}
     * @allow (read) any signed in user can read OSHI data.
     * @deny (write) any writes are forbidden until proper authorization is set up.
     * @principle Permits public read access while restricting write operations to authorized users.
     */
    match /oshi/{oshiId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add authorization for OSHI data creation.
      allow update: if false; // TODO: Add authorization for OSHI data updates.
      allow delete: if false; // TODO: Add authorization for OSHI data deletion.
    }

    /**
     * @description Allows anyone to read provision data, but restricts writes.
     * @path /provisions/{provisionId}
     * @allow (read) any signed in user can read provision data.
     * @deny (write) any writes are forbidden until proper authorization is set up.
     * @principle Permits public read access while restricting write operations to authorized users.
     */
    match /provisions/{provisionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add authorization for provision creation.
      allow update: if false; // TODO: Add authorization for provision updates.
      allow delete: if false; // TODO: Add authorization for provision deletion.
    }

   /**
     * @description Allows anyone to read material data, but restricts writes.
     * @path /materials/{materialId}
     * @allow (read) any signed in user can read material data.
     * @deny (write) any writes are forbidden until proper authorization is set up.
     * @principle Permits public read access while restricting write operations to authorized users.
     */
    match /materials/{materialId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add authorization for material creation.
      allow update: if false; // TODO: Add authorization for material updates.
      allow delete: if false; // TODO: Add authorization for material deletion.
    }
  }
}